{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/roversaif/react-quiz/src/components/QuestionCard.jsx\";\nimport React from 'react';\nimport { Button, Grid, Header, Progress } from 'semantic-ui-react';\n\nclass QuestionCard extends React.Component {\n  /*    constructor(props) {\r\n         super(props);\r\n     } */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        padded: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n          only: \"computer tablet\",\n          children: /*#__PURE__*/_jsxDEV(Header, {\n            as: \"h2\",\n            color: \"teal\",\n            textAlign: \"center\",\n            children: 'Q' + this.props.qno + '. ' + this.props.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n          only: \"mobile\",\n          children: /*#__PURE__*/_jsxDEV(Header, {\n            as: \"h3\",\n            color: \"teal\",\n            textAlign: \"center\",\n            children: 'Q' + this.props.qno + '. ' + this.props.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), this.props.time !== undefined ? this.props.time > 0 ? this.props.time < 10001 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Progress, {\n          total: 10000,\n          value: this.props.time,\n          color: this.props.time > 3000 ? 'teal' : 'red',\n          size: \"tiny\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(Header, {\n          as: \"h3\",\n          color: this.props.time > 3000 ? 'teal' : 'red',\n          children: [\"Time Left: \", this.props.time / 1000]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 34\n      }, this) : '' : /*#__PURE__*/_jsxDEV(Header, {\n        as: \"h2\",\n        color: \"red\",\n        textAlign: \"center\",\n        children: \"Time up!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 29\n      }, this) : '', /*#__PURE__*/_jsxDEV(Grid, {\n        centered: true,\n        children: this.props.time !== undefined ? this.props.time > 0 && this.props.time < 10001 ? this.props.choices.map((x, ind) => {\n          return /*#__PURE__*/_jsxDEV(Grid.Row, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n              computer: \"6\",\n              tablet: \"8\",\n              mobile: \"12\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: this.props.time < 1,\n                fluid: true,\n                size: \"large\",\n                basic: true,\n                color: this.props.selected ? x === this.props.selected ? x === this.props.correct ? 'green' : 'red' : x === this.props.correct ? 'green' : 'teal' : 'teal',\n                onClick: this.props.onChoice,\n                children: x\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 45\n            }, this)\n          }, ind, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 41\n          }, this);\n        }) : '' : this.props.choices.map((x, ind) => {\n          return /*#__PURE__*/_jsxDEV(Grid.Row, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n              computer: \"6\",\n              tablet: \"8\",\n              mobile: \"12\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: this.props.time < 1,\n                fluid: true,\n                size: \"large\",\n                basic: true,\n                color: this.props.selected ? x === this.props.selected ? x === this.props.correct ? 'green' : 'red' : x === this.props.correct ? 'green' : 'teal' : 'teal',\n                onClick: this.props.onChoice,\n                children: x\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 41\n            }, this)\n          }, ind, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default QuestionCard;","map":{"version":3,"sources":["/home/roversaif/react-quiz/src/components/QuestionCard.jsx"],"names":["React","Button","Grid","Header","Progress","QuestionCard","Component","render","props","qno","question","time","undefined","choices","map","x","ind","selected","correct","onChoice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Button, Grid, Header, Progress } from 'semantic-ui-react';\r\n\r\nclass QuestionCard extends React.Component {\r\n /*    constructor(props) {\r\n        super(props);\r\n    } */\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid padded>\r\n                    <Grid.Row only='computer tablet'>\r\n                        <Header as='h2' color='teal' textAlign='center'>{'Q' + this.props.qno + '. ' + this.props.question}</Header>\r\n                    </Grid.Row>\r\n                    <Grid.Row only='mobile'>\r\n                        <Header as='h3' color='teal' textAlign='center'>{'Q' + this.props.qno + '. ' + this.props.question}</Header>\r\n                    </Grid.Row>\r\n                </Grid>\r\n                {\r\n                    this.props.time !== undefined ?\r\n                        this.props.time > 0 ?\r\n                            this.props.time < 10001 ?\r\n                                (<React.Fragment>\r\n                                    <Progress total={10000} value={this.props.time} color={this.props.time > 3000 ? 'teal' : 'red'} size='tiny'></Progress>\r\n                                    <Header as='h3' color={this.props.time > 3000 ? 'teal' : 'red'}>Time Left: {this.props.time / 1000}</Header>\r\n                                </React.Fragment>)\r\n                                :\r\n                                ''\r\n                            :\r\n                            <Header as='h2' color='red' textAlign='center'>Time up!</Header>\r\n                        :\r\n                        ''\r\n                }\r\n                <Grid centered>\r\n                    {\r\n                        this.props.time !== undefined ?\r\n                            this.props.time > 0 && this.props.time < 10001 ?\r\n                                this.props.choices.map((x,ind) => {\r\n                                    return (\r\n                                        <Grid.Row key={ind}>\r\n                                            <Grid.Column computer='6' tablet='8' mobile='12'>\r\n                                                <Button disabled={this.props.time < 1} fluid size='large' basic color={this.props.selected ? x === this.props.selected ? x === this.props.correct ? 'green' : 'red' : x === this.props.correct ? 'green' : 'teal' : 'teal'} onClick={this.props.onChoice}>{x}</Button>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                    )\r\n                                })\r\n                                : ''\r\n                            :\r\n                            this.props.choices.map((x,ind) => {\r\n                                return (\r\n                                    <Grid.Row key={ind}>\r\n                                        <Grid.Column computer='6' tablet='8' mobile='12'>\r\n                                            <Button disabled={this.props.time < 1} fluid size='large' basic color={this.props.selected ? x === this.props.selected ? x === this.props.correct ? 'green' : 'red' : x === this.props.correct ? 'green' : 'teal' : 'teal'} onClick={this.props.onChoice}>{x}</Button>\r\n                                        </Grid.Column>\r\n                                    </Grid.Row>\r\n                                )\r\n                            })\r\n                    }\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default QuestionCard;"]},"metadata":{},"sourceType":"module"}