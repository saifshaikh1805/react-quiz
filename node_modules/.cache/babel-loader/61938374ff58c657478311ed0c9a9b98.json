{"ast":null,"code":"const defaultQuizState = {\n  category: {\n    id: -1,\n    name: 'CATEGORY_NOT_SELECTED'\n  },\n  loading: true,\n  questions: [],\n  currentQuestion: 0,\n  score: 0,\n  phase: 'NOT_STARTED',\n  answerStates: []\n};\nexport const quizActions = {\n  LOADING: 'loading',\n  SET_CATEGORY: 'setCategory',\n  SET_QUESTIONS: 'setQuestions',\n  SET_CHOICE: 'setChoice',\n  SET_CURRENT_QUESTION: 'setCurrentQuestion',\n  SET_SCORE: 'setScore',\n  SET_PHASE: 'setPhase',\n  RESET: 'resetQuizState',\n  SET_TIME_REM: 'setTimeRem'\n};\n\nconst quiz = (state = defaultQuizState, action) => {\n  switch (action.type) {\n    case quizActions.LOADING:\n      return Object.assign({}, state, {\n        loading: action.payload\n      });\n\n    case quizActions.SET_CATEGORY:\n      return Object.assign({}, state, {\n        category: action.payload\n      });\n\n    case quizActions.SET_QUESTIONS:\n      return Object.assign({}, state, {\n        questions: action.payload\n      });\n\n    case quizActions.SET_CHOICE:\n      state.questions[state.currentQuestion].selected = action.payload;\n      return Object.assign({}, state);\n\n    case quizActions.SET_CURRENT_QUESTION:\n      return Object.assign({}, state, {\n        currentQuestion: action.payload\n      });\n\n    case quizActions.SET_SCORE:\n      state.answerStates.push(action.payload);\n\n      if (action.payload === 'c') {\n        if (state.questions[state.currentQuestion].timeRemaining > 9000) state.score += 20;else state.score += Math.ceil(state.questions[state.currentQuestion].timeRemaining * 2 / 1000);\n      }\n\n      return Object.assign({}, state);\n\n    case quizActions.SET_PHASE:\n      return Object.assign({}, state, {\n        phase: action.payload\n      });\n\n    case quizActions.RESET:\n      return Object.assign({}, defaultQuizState, {\n        category: action.payload\n      });\n\n    case quizActions.SET_TIME_REM:\n      state.questions[state.currentQuestion].timeRemaining = action.payload;\n      return Object.assign({}, state);\n\n    default:\n      return state;\n  }\n};\n\nexport default quiz;","map":{"version":3,"sources":["/home/roversaif/react-quiz/src/redux/quiz.js"],"names":["defaultQuizState","category","id","name","loading","questions","currentQuestion","score","phase","answerStates","quizActions","LOADING","SET_CATEGORY","SET_QUESTIONS","SET_CHOICE","SET_CURRENT_QUESTION","SET_SCORE","SET_PHASE","RESET","SET_TIME_REM","quiz","state","action","type","Object","assign","payload","selected","push","timeRemaining","Math","ceil"],"mappings":"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","sourcesContent":["const defaultQuizState = {\r\n    category: { id: -1, name: 'CATEGORY_NOT_SELECTED' },\r\n    loading: true,\r\n    questions: [],\r\n    currentQuestion: 0,\r\n    score: 0,\r\n    phase: 'NOT_STARTED',\r\n    answerStates: []\r\n}\r\n\r\nexport const quizActions = {\r\n    LOADING: 'loading',\r\n    SET_CATEGORY: 'setCategory',\r\n    SET_QUESTIONS: 'setQuestions',\r\n    SET_CHOICE: 'setChoice',\r\n    SET_CURRENT_QUESTION: 'setCurrentQuestion',\r\n    SET_SCORE: 'setScore',\r\n    SET_PHASE: 'setPhase',\r\n    RESET: 'resetQuizState',\r\n    SET_TIME_REM: 'setTimeRem'\r\n}\r\n\r\nconst quiz = (state = defaultQuizState, action) => {\r\n    switch (action.type) {\r\n        case quizActions.LOADING:\r\n            return Object.assign({}, state, { loading: action.payload });\r\n        case quizActions.SET_CATEGORY:\r\n            return Object.assign({}, state, { category: action.payload });\r\n        case quizActions.SET_QUESTIONS:\r\n            return Object.assign({}, state, { questions: action.payload });\r\n        case quizActions.SET_CHOICE:\r\n            state.questions[state.currentQuestion].selected = action.payload;\r\n            return Object.assign({}, state);\r\n        case quizActions.SET_CURRENT_QUESTION:\r\n            return Object.assign({}, state, { currentQuestion: action.payload });\r\n        case quizActions.SET_SCORE:\r\n            state.answerStates.push(action.payload);\r\n            if(action.payload === 'c') {\r\n                if(state.questions[state.currentQuestion].timeRemaining > 9000)\r\n                    state.score += 20;\r\n                else\r\n                state.score += Math.ceil((state.questions[state.currentQuestion].timeRemaining*2)/1000); \r\n            }\r\n            return Object.assign({}, state);\r\n        case quizActions.SET_PHASE:\r\n            return Object.assign({}, state, { phase: action.payload });\r\n        case quizActions.RESET:\r\n            return Object.assign({}, defaultQuizState, { category: action.payload });\r\n        case quizActions.SET_TIME_REM:\r\n            state.questions[state.currentQuestion].timeRemaining = action.payload;\r\n            return Object.assign({}, state);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default quiz;"]},"metadata":{},"sourceType":"module"}