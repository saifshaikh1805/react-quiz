{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/roversaif/react-quiz/src/pages/Categories.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Header, Grid, Button, Loader, Segment } from 'semantic-ui-react';\nimport { dispatchAction } from '../redux/all';\nimport { categoriesActions } from '../redux/categories';\nimport { quizActions } from '../redux/quiz';\n\nclass Categories extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleCategoryClick = (e, cat) => {\n      dispatchAction(quizActions.SET_CATEGORY, {\n        id: cat.id,\n        name: cat.name\n      });\n      this.props.history.push('/quiz');\n    };\n  }\n\n  /*  constructor(props) {\r\n       super(props);\r\n   } */\n  componentDidMount() {\n    fetch('https://opentdb.com/api_category.php').then(res => res.json()).then(data => {\n      dispatchAction(categoriesActions.SET_CATEGORIES, data.trivia_categories);\n      dispatchAction(categoriesActions.LOADING, false);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            as: \"h1\",\n            color: \"teal\",\n            textAlign: \"center\",\n            children: \"Play quiz on any of these amazing topics!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n              centered: true,\n              children: this.props.categories.loading ? /*#__PURE__*/_jsxDEV(Segment, {\n                basic: true,\n                children: /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inverted: true,\n                  size: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 41\n              }, this) : this.props.categories.list.map(c => {\n                return /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: (e, cat) => this.handleCategoryClick(e, c),\n                  basic: true,\n                  color: \"teal\",\n                  style: {\n                    margin: '5px'\n                  },\n                  children: c.name\n                }, c.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 53\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    categories: state.categories\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Categories));","map":{"version":3,"sources":["/home/roversaif/react-quiz/src/pages/Categories.jsx"],"names":["React","connect","withRouter","Header","Grid","Button","Loader","Segment","dispatchAction","categoriesActions","quizActions","Categories","Component","handleCategoryClick","e","cat","SET_CATEGORY","id","name","props","history","push","componentDidMount","fetch","then","res","json","data","SET_CATEGORIES","trivia_categories","LOADING","render","categories","loading","list","map","c","margin","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Header, Grid, Button, Loader, Segment } from 'semantic-ui-react';\r\nimport { dispatchAction } from '../redux/all';\r\nimport {categoriesActions} from '../redux/categories';\r\nimport { quizActions } from '../redux/quiz';\r\n\r\nclass Categories extends React.Component {\r\n   /*  constructor(props) {\r\n        super(props);\r\n    } */\r\n\r\n    componentDidMount() {\r\n        fetch('https://opentdb.com/api_category.php')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                    dispatchAction(categoriesActions.SET_CATEGORIES, data.trivia_categories);\r\n                    dispatchAction(categoriesActions.LOADING, false);\r\n            })\r\n    }\r\n\r\n    handleCategoryClick = (e,cat) => {\r\n        dispatchAction(quizActions.SET_CATEGORY, { id: cat.id, name:cat.name });\r\n        this.props.history.push('/quiz');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Header as='h1' color='teal' textAlign='center'>Play quiz on any of these amazing topics!</Header>\r\n                        <Grid>\r\n                            <Grid.Row centered>\r\n                                {\r\n                                    this.props.categories.loading ?\r\n                                        <Segment basic>\r\n                                            <Loader active inverted size='large'></Loader>\r\n                                        </Segment>\r\n                                        :\r\n                                        this.props.categories.list.map(c => {\r\n                                            return (\r\n                                                    <Button onClick={(e,cat) => this.handleCategoryClick(e,c)} key={c.id} basic color='teal' style={{ margin: '5px' }}>{c.name}</Button>\r\n                                            )\r\n                                        })\r\n                                }\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        categories: state.categories\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(Categories));"]},"metadata":{},"sourceType":"module"}