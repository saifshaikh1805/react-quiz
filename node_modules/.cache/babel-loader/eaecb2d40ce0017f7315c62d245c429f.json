{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/roversaif/react-quiz/src/pages/Quiz.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Grid, Header, Icon, Loader, Segment } from 'semantic-ui-react';\nimport QuestionCard from '../components/QuestionCard';\nimport { htmlDecode, shuffleArray } from '../helperFunctions';\nimport { dispatchAction } from '../redux/all';\nimport { quizActions } from '../redux/quiz';\n\nclass Quiz extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.manageTime = () => {\n      setTimeout(() => {\n        this.ti = setInterval(() => {\n          let tr = this.props.quiz.questions[this.props.quiz.currentQuestion].timeRemaining;\n          if (tr > 0) dispatchAction(quizActions.SET_TIME_REM, tr - 1000);else this.skipQuestion();\n        }, 1000);\n      }, 4000);\n    };\n\n    this.fetchQuestions = () => {\n      if (this.props.quiz.category.id !== -1) {}\n    };\n\n    this.skipQuestion = () => {\n      clearInterval(this.ti);\n      dispatchAction(quizActions.SET_CHOICE, -1);\n      dispatchAction(quizActions.SET_SCORE, 's');\n      setTimeout(() => {\n        if (this.props.quiz.questions.filter(x => {\n          return x.selected;\n        }).length < 7) {\n          dispatchAction(quizActions.SET_CURRENT_QUESTION, this.props.quiz.currentQuestion + 1);\n          this.manageTime();\n        } else {\n          //debugger;\n          dispatchAction(quizActions.SET_PHASE, 'COMPLETE');\n        }\n      }, 1500);\n    };\n\n    this.handleChoiceClick = (e, d) => {\n      e.target.blur();\n      clearInterval(this.ti);\n      dispatchAction(quizActions.SET_CHOICE, d.children);\n      dispatchAction(quizActions.SET_SCORE, d.children === this.props.quiz.questions[this.props.quiz.currentQuestion].correct_answer ? 'c' : 'i');\n      setTimeout(() => {\n        if (this.props.quiz.questions.filter(x => {\n          return x.selected;\n        }).length < 7) {\n          dispatchAction(quizActions.SET_CURRENT_QUESTION, this.props.quiz.currentQuestion + 1);\n          this.manageTime();\n        } else {\n          //debugger;\n          dispatchAction(quizActions.SET_PHASE, 'COMPLETE');\n        }\n      }, 1500);\n    };\n\n    this.handleGoToCategoriesClick = () => {\n      clearInterval(this.ti);\n      dispatchAction(quizActions.RESET, {\n        id: -1,\n        name: 'CATEGORY_NOT_SELECTED'\n      });\n      this.props.history.push('/');\n    };\n\n    this.handlePlayAgainClick = () => {\n      let currCat = this.props.quiz.category;\n      dispatchAction(quizActions.RESET, currCat);\n      this.fetchQuestions();\n    };\n  }\n\n  /*    constructor(props) {\r\n         super(props);\r\n     } */\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            as: \"h1\",\n            color: \"teal\",\n            textAlign: \"center\",\n            children: this.props.quiz.category.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), this.props.quiz.questions.length > 0 ? this.props.quiz.questions.filter(x => !x.selected).length > 0 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(QuestionCard, {\n              time: this.props.quiz.questions[this.props.quiz.currentQuestion].timeRemaining,\n              qno: this.props.quiz.currentQuestion + 1,\n              correct: this.props.quiz.questions[this.props.quiz.currentQuestion].correct_answer,\n              selected: this.props.quiz.questions[this.props.quiz.currentQuestion].selected,\n              onChoice: this.handleChoiceClick,\n              question: this.props.quiz.questions[this.props.quiz.currentQuestion].question,\n              choices: this.props.quiz.questions[this.props.quiz.currentQuestion].choices\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 37\n          }, this) : this.props.quiz.phase === 'COMPLETE' ? /*#__PURE__*/_jsxDEV(Segment, {\n            basic: true,\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              as: \"h2\",\n              textAlign: \"center\",\n              color: \"teal\",\n              children: [\"Your score: \", this.props.quiz.score]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              centered: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                columns: \"2\",\n                only: \"computer tablet\",\n                children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                  computer: \"5\",\n                  mobile: \"8\",\n                  tablet: \"8\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: this.handlePlayAgainClick,\n                    color: \"teal\",\n                    size: \"medium\",\n                    basic: true,\n                    fluid: true,\n                    children: \"Play again\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  computer: \"5\",\n                  mobile: \"8\",\n                  tablet: \"8\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: this.handleGoToCategoriesClick,\n                    color: \"teal\",\n                    size: \"medium\",\n                    basic: true,\n                    fluid: true,\n                    children: \"Go to categories\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                only: \"mobile\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: this.handlePlayAgainClick,\n                    color: \"teal\",\n                    size: \"medium\",\n                    basic: true,\n                    fluid: true,\n                    children: \"Play again\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                only: \"mobile\",\n                children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: this.handleGoToCategoriesClick,\n                    color: \"teal\",\n                    size: \"medium\",\n                    basic: true,\n                    fluid: true,\n                    children: \"Go to categories\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(QuestionCard, {\n              qno: this.props.quiz.currentQuestion + 1,\n              correct: this.props.quiz.questions[this.props.quiz.currentQuestion].correct_answer,\n              selected: this.props.quiz.questions[this.props.quiz.currentQuestion].selected,\n              onChoice: this.handleChoiceClick,\n              question: this.props.quiz.questions[this.props.quiz.currentQuestion].question,\n              choices: this.props.quiz.questions[this.props.quiz.currentQuestion].choices\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(Segment, {\n            basic: true,\n            children: /*#__PURE__*/_jsxDEV(Loader, {\n              active: true,\n              inverted: true,\n              size: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), this.props.quiz.phase === 'ONGOING' ? /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: \"8\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleGoToCategoriesClick,\n            icon: true,\n            color: \"teal\",\n            basic: true,\n            labelPosition: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"left arrow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), \"Quit\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: \"8\",\n          textAlign: \"right\",\n          children: /*#__PURE__*/_jsxDEV(Header, {\n            as: \"h2\",\n            color: \"teal\",\n            style: {\n              marginTop: 'auto',\n              marginBottom: 'auto'\n            },\n            children: [\"Score: \", this.props.quiz.score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //console.log('z', state);\n  return {\n    quiz: state.quiz\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Quiz));","map":{"version":3,"sources":["/home/roversaif/react-quiz/src/pages/Quiz.jsx"],"names":["React","connect","withRouter","Button","Grid","Header","Icon","Loader","Segment","QuestionCard","htmlDecode","shuffleArray","dispatchAction","quizActions","Quiz","Component","manageTime","setTimeout","ti","setInterval","tr","props","quiz","questions","currentQuestion","timeRemaining","SET_TIME_REM","skipQuestion","fetchQuestions","category","id","clearInterval","SET_CHOICE","SET_SCORE","filter","x","selected","length","SET_CURRENT_QUESTION","SET_PHASE","handleChoiceClick","e","d","target","blur","children","correct_answer","handleGoToCategoriesClick","RESET","name","history","push","handlePlayAgainClick","currCat","componentDidMount","render","question","choices","phase","score","marginTop","marginBottom","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Button, Grid, Header, Icon, Loader, Segment } from 'semantic-ui-react';\r\nimport QuestionCard from '../components/QuestionCard';\r\nimport { htmlDecode, shuffleArray } from '../helperFunctions';\r\nimport { dispatchAction } from '../redux/all';\r\nimport { quizActions } from '../redux/quiz';\r\n\r\nclass Quiz extends React.Component {\r\n /*    constructor(props) {\r\n        super(props);\r\n    } */\r\n\r\n    componentDidMount() {\r\n        this.fetchQuestions();\r\n    }\r\n\r\n    manageTime = () => {\r\n        setTimeout(() => {\r\n            this.ti = setInterval(() => {\r\n                let tr = this.props.quiz.questions[this.props.quiz.currentQuestion].timeRemaining;\r\n                if (tr > 0)\r\n                    dispatchAction(quizActions.SET_TIME_REM, tr - 1000);\r\n                else\r\n                    this.skipQuestion();\r\n            }, 1000);\r\n        }, 4000)\r\n    }\r\n\r\n    ti;\r\n\r\n    fetchQuestions = () => {\r\n        if(this.props.quiz.category.id !== -1)\r\n        {\r\n\r\n        }\r\n    }\r\n\r\n    skipQuestion = () => {\r\n        clearInterval(this.ti);\r\n        dispatchAction(quizActions.SET_CHOICE, -1);\r\n        dispatchAction(quizActions.SET_SCORE, 's');\r\n        setTimeout(() => {\r\n            if (this.props.quiz.questions.filter(x => { return x.selected }).length < 7) {\r\n                dispatchAction(quizActions.SET_CURRENT_QUESTION, this.props.quiz.currentQuestion + 1);\r\n                this.manageTime();\r\n            }\r\n            else {\r\n                //debugger;\r\n                dispatchAction(quizActions.SET_PHASE, 'COMPLETE');\r\n            }\r\n        }, 1500);\r\n    }\r\n\r\n\r\n    handleChoiceClick = (e, d) => {\r\n        e.target.blur();\r\n        clearInterval(this.ti);\r\n        dispatchAction(quizActions.SET_CHOICE, d.children);\r\n        dispatchAction(quizActions.SET_SCORE, d.children === this.props.quiz.questions[this.props.quiz.currentQuestion].correct_answer ? 'c' : 'i');\r\n        setTimeout(() => {\r\n            if (this.props.quiz.questions.filter(x => { return x.selected }).length < 7) {\r\n                dispatchAction(quizActions.SET_CURRENT_QUESTION, this.props.quiz.currentQuestion + 1);\r\n                this.manageTime();\r\n            }\r\n            else {\r\n                //debugger;\r\n                dispatchAction(quizActions.SET_PHASE, 'COMPLETE');\r\n            }\r\n        }, 1500);\r\n\r\n    }\r\n\r\n    handleGoToCategoriesClick = () => {\r\n        clearInterval(this.ti);\r\n        dispatchAction(quizActions.RESET, { id: -1, name: 'CATEGORY_NOT_SELECTED' });\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    handlePlayAgainClick = () => {\r\n        let currCat = this.props.quiz.category;\r\n        dispatchAction(quizActions.RESET, currCat);\r\n        this.fetchQuestions();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Header as='h1' color='teal' textAlign='center'>{this.props.quiz.category.name}</Header>\r\n                        {\r\n                            this.props.quiz.questions.length > 0 ?\r\n                                this.props.quiz.questions.filter(x => !x.selected).length > 0 ?\r\n                                    <React.Fragment>\r\n                                        <QuestionCard time={this.props.quiz.questions[this.props.quiz.currentQuestion].timeRemaining} qno={this.props.quiz.currentQuestion + 1} correct={this.props.quiz.questions[this.props.quiz.currentQuestion].correct_answer} selected={this.props.quiz.questions[this.props.quiz.currentQuestion].selected} onChoice={this.handleChoiceClick} question={this.props.quiz.questions[this.props.quiz.currentQuestion].question} choices={this.props.quiz.questions[this.props.quiz.currentQuestion].choices}></QuestionCard>\r\n                                    </React.Fragment>\r\n                                    :\r\n                                    this.props.quiz.phase === 'COMPLETE' ?\r\n                                        <Segment basic>\r\n                                            <Header as='h2' textAlign='center' color='teal'>Your score: {this.props.quiz.score}</Header>\r\n                                            <Grid centered>\r\n                                                <Grid.Row columns='2' only='computer tablet'>\r\n                                                    <Grid.Column computer='5' mobile='8' tablet='8'>\r\n                                                        <Button onClick={this.handlePlayAgainClick} color='teal' size='medium' basic fluid>Play again</Button>\r\n                                                    </Grid.Column>\r\n                                                    <Grid.Column computer='5' mobile='8' tablet='8'>\r\n                                                        <Button onClick={this.handleGoToCategoriesClick} color='teal' size='medium' basic fluid>Go to categories</Button>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row only='mobile'>\r\n                                                    <Grid.Column>\r\n                                                        <Button onClick={this.handlePlayAgainClick} color='teal' size='medium' basic fluid>Play again</Button>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row only='mobile'>\r\n                                                <Grid.Column>\r\n                                                    <Button onClick={this.handleGoToCategoriesClick} color='teal' size='medium' basic fluid>Go to categories</Button>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                            </Grid>\r\n                                        </Segment>\r\n                                        :\r\n                                        <React.Fragment>\r\n                                            <QuestionCard qno={this.props.quiz.currentQuestion + 1} correct={this.props.quiz.questions[this.props.quiz.currentQuestion].correct_answer} selected={this.props.quiz.questions[this.props.quiz.currentQuestion].selected} onChoice={this.handleChoiceClick} question={this.props.quiz.questions[this.props.quiz.currentQuestion].question} choices={this.props.quiz.questions[this.props.quiz.currentQuestion].choices}></QuestionCard>\r\n                                        </React.Fragment>\r\n                                :\r\n                                <Segment basic>\r\n                                    <Loader active inverted size='large'></Loader>\r\n                                </Segment>\r\n\r\n                        }\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                {\r\n                    this.props.quiz.phase === 'ONGOING' ?\r\n                        <Grid.Row>\r\n                            <Grid.Column width='8'>\r\n                                <Button onClick={this.handleGoToCategoriesClick} icon color='teal' basic labelPosition='left'>\r\n                                    <Icon name='left arrow' />\r\n                              Quit\r\n                        </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column width='8' textAlign='right'>\r\n                                <Header as='h2' color='teal' style={{marginTop:'auto', marginBottom:'auto'}}>Score: {this.props.quiz.score}</Header>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        :\r\n                        ''\r\n                }\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log('z', state);\r\n    return {\r\n        quiz: state.quiz\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(Quiz));\r\n"]},"metadata":{},"sourceType":"module"}